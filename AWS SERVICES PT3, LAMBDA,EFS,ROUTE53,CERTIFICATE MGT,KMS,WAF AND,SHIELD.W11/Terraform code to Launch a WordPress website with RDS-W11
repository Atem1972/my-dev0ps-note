Terraform code to Launch a WordPress website with RDS

Owned by noel.tatah (Unlicensed)
Last updated: Aug 31, 2024 by Estephe Kana
8 min read

In this section, We are going to use Terraform to deploy a WordPress application.

Note: you have already done this manually, and this section will just go ahead and automate the deployment with Terraform.
Prerequisites

    Terraform must be installed (installation steps here if you have not yet installed it)

    AWS CLI must be installed (installation steps Here) and configured (link here if you have not yet configured AWS-CLI in your terminal)

Now let's go ahead and deploy the WordPress application using Terraform.

 
1- Clone the Code from GitHub

First, we need to clone the code to launch the infrastructure  from GitHub

Move into your DevOpsLab directory
cd ~/DevOpsLab

Once in the directory, create a directory called AWS-Projects
mkdir AWS-Projects
cd AWS-Projects

now clone the code.
git clone https://github.com/utrains/Terraform-wordpress-rds.git
2- Explaining the code

After cloning, move into the codes' directory 
cd Terraform-wordpress-rds

In the directory, you will see the following files: data.tf, Keypair.tf, main.tf, outputs.tf, userdata.tpl, variable.tf and version.tf
data.tf:

This file defines a Terraform data block that retrieves the latest Amazon Machine Image (AMI) for Linux 2 from AWS. It specifies that the AMI should be owned by Amazon and filters the search based on the AMI name pattern and virtualization type.
data "aws_ami" "linux2" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }


  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}
keypair.tf:

This code creates an AWS key pair and saves the private key to a local file. The key pair will be used for SSH authentication purposes in AWS EC2 instances.
# Generates a secure private k ey and encodes it as PEM
resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}
# Create the Key Pair
resource "aws_key_pair" "ec2_key" {
  key_name   = "privatekeypair"  
  public_key = tls_private_key.ec2_key.public_key_openssh
}
# Save file
resource "local_file" "ssh_key" {
  filename = "keypair.pem"
  content  = tls_private_key.ec2_key.private_key_pem
}
main.tf:

It contains the resource block to create a VPC, private subnets for our RDS, public subnet for EC2, security groups; provisions an RDS database instance, and deploys an EC2 instance for hosting a WordPress application.
provider "aws" {

  region   = var.region
}

# Create VPC
resource "aws_vpc" "prod-vpc" {
  cidr_block           = var.VPC_cidr
  enable_dns_support   = "true" #gives you an internal domain name
  enable_dns_hostnames = "true" #gives you an internal host name
  instance_tenancy     = "default"


}

# Create Public Subnet for EC2
resource "aws_subnet" "prod-subnet-public-1" {
  vpc_id                  = aws_vpc.prod-vpc.id
  cidr_block              = var.subnet1_cidr
  map_public_ip_on_launch = "true" //it makes this a public subnet
  availability_zone       = var.AZ1

}

# Create Private subnet for RDS
resource "aws_subnet" "prod-subnet-private-1" {
  vpc_id                  = aws_vpc.prod-vpc.id
  cidr_block              = var.subnet2_cidr
  map_public_ip_on_launch = "false" //it makes private subnet
  availability_zone       = var.AZ2

}

# Create second Private subnet for RDS
resource "aws_subnet" "prod-subnet-private-2" {
  vpc_id                  = aws_vpc.prod-vpc.id
  cidr_block              = var.subnet3_cidr
  map_public_ip_on_launch = "false" //it makes private subnet
  availability_zone       = var.AZ3

}

# Create IGW for internet connection 
resource "aws_internet_gateway" "prod-igw" {
  vpc_id = aws_vpc.prod-vpc.id

}

# Creating Route table 
resource "aws_route_table" "prod-public-crt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    //associated subnet can reach everywhere
    cidr_block = "0.0.0.0/0"
    //CRT uses this IGW to reach internet
    gateway_id = aws_internet_gateway.prod-igw.id
  }
}

# Associating route tabe to public subnet
resource "aws_route_table_association" "prod-crta-public-subnet-1" {
  subnet_id      = aws_subnet.prod-subnet-public-1.id
  route_table_id = aws_route_table.prod-public-crt.id
}
//security group for EC2

resource "aws_security_group" "ec2_allow_rule" {
  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "MYSQL"
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  vpc_id = aws_vpc.prod-vpc.id
  tags = {
    Name = "allow ssh,http,https"
  }
}

# Security group for RDS
resource "aws_security_group" "RDS_allow_rule" {
  vpc_id = aws_vpc.prod-vpc.id
  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = ["${aws_security_group.ec2_allow_rule.id}"]
  }
  # Allow all outbound traffic.
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "allow ec2"
  }
}

# Create RDS Subnet group
resource "aws_db_subnet_group" "RDS_subnet_grp" {
  subnet_ids = ["${aws_subnet.prod-subnet-private-1.id}", "${aws_subnet.prod-subnet-private-2.id}"]
}

# Create RDS instance
resource "aws_db_instance" "wordpressdb" {
  allocated_storage      = 10
  engine                 = "mysql"
  engine_version         = "5.7"
  instance_class         = var.instance_class
  db_subnet_group_name   = aws_db_subnet_group.RDS_subnet_grp.id
  vpc_security_group_ids = ["${aws_security_group.RDS_allow_rule.id}"]
  db_name                   = var.database_name
  username               = var.database_user
  password               = var.database_password
  skip_final_snapshot    = true
 # make sure rds manual password chnages is ignored
  lifecycle {
     ignore_changes = [password]
   }
}

# change USERDATA varible value after grabbing RDS endpoint info
data "template_file" "user_data" {
  template = file("${path.module}/userdata.tpl")
  vars = {
    db_username      = var.database_user
    db_user_password = var.database_password
    db_name          = var.database_name
    db_RDS           = aws_db_instance.wordpressdb.endpoint
  }
}

# Create EC2 ( only after RDS is provisioned)
resource "aws_instance" "wordpressec2" {
  ami                    = data.aws_ami.linux2.id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.prod-subnet-public-1.id
  vpc_security_group_ids = ["${aws_security_group.ec2_allow_rule.id}"]
  user_data              = data.template_file.user_data.rendered
  key_name               = aws_key_pair.ec2_key.key_name
  tags = {
    Name = "Wordpress.web"
  }
  root_block_device {
    volume_size = var.root_volume_size # in GB 
  }
  # this will stop creating EC2 before RDS is provisioned
  depends_on = [aws_db_instance.wordpressdb]
 }

 

outputs.tf:

This file contains outputs that provide convenient access to important information about the provisioned AWS resources, such as the public IP address of the EC2 instance and the endpoint URL of the RDS database. They also provide a message with a URL for accessing the WordPress application.
output "IP" {
  value = aws_instance.wordpressec2.public_ip
}
output "RDS-Endpoint" {
  value = aws_db_instance.wordpressdb.endpoint
}
output "INFO" {
  value = "AWS Resources and Wordpress has been provisioned. Go to http://${aws_instance.wordpressec2.public_ip}"
}

 

userdata.tpl:

 This file contains the user data needed to install the necessary software, download and extract the WordPress files, modify the configuration file to use the provided database information, set up the appropriate file permissions, and start the Apache web server.
#!/bin/bash
# variable will be populated by terraform template
db_username=${db_username}
db_user_password=${db_user_password}
db_name=${db_name}
db_RDS=${db_RDS}
sudo yum install wget httpd mysql php php-mysql -y
sudo wget https://wordpress.org/latest.tar.gz
sudo tar -xzf latest.tar.gz
sudo cp -r wordpress/* /var/www/html
sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
sudo cd /var/www/html
sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
sudo sed -i 's/database_name_here/${db_name}/' /var/www/html/wp-config.php
sudo sed -i 's/username_here/${db_username}/' /var/www/html/wp-config.php
sudo sed -i 's/password_here/${db_user_password}/' /var/www/html/wp-config.php
sudo sed -i 's/localhost/${db_RDS}/' /var/www/html/wp-config.php
sudo sed -i "s/wp_/wp1_/g" wp-config.php
sudo sed -i "s/\$table_prefix = 'wp_';/\$table_prefix = 'wp2_';/g" /var/www/html/wp-config.php
sudo chown -R apache:apache /var/www/html
sudo systemctl start httpd 
sudo systemctl enable httpd 

 
variable.tf : 

This file contains all our variables to allow you to customize various aspects of the infrastructure deployment, such as the database configuration, AWS region, availability zones, VPC and subnet CIDR blocks, EC2 instance and RDS instance types, and root volume size.
variable "database_name" {
  type = string
  default = "wordpress"
}
variable "database_password" {
  type = string
  default = "wordpress"
}
variable "database_user" {
  type = string
  default = "wordpress"
}

variable "region" {
  type = string
  default = "us-east-1"
}

variable "AZ1" {
  type = string
  default = "us-east-1a"
}
variable "AZ2" {
  type = string
  default = "us-east-1b"
}
variable "AZ3" {
  type = string
  default = "us-east-1c"
}
variable "VPC_cidr" {
  type = string
  default = "192.168.0.0/16"
}
variable "subnet1_cidr" {
  type = string
  default = "192.168.0.0/18"
}
variable "subnet2_cidr" {
  type = string
  default = "192.168.64.0/18"
}
variable "subnet3_cidr" {
  type = string
  default = "192.168.128.0/18"
}
variable "instance_type" {
  type = string
  default = "t2.micro"
}
variable "instance_class" {
  type = string
  default = "db.t3.micro"
}
variable "root_volume_size" {
  type = string
  default = "10"
}

 

version.tf:

This code ensures the Terraform project has the required providers (AWS, Null, and Template) at the specified versions and sets the minimum required version of Terraform.
terraform {
  required_providers {
    aws = {
      version = "~>4.30.0"
    }
    null = {
      version = "~> 3.1.1"
    }
    template ={
       version= "~> 2.2.0"       
    }
  }
  required_version = ">= 1.1.3"
}

 

Go through all the files and have a better grasp of what they do.
3- Create Infrastructure 

Now let's launch our infrastructure.

Run the commands below.
terraform init
terraform plan
terraform apply -auto-approve

It will take time to provision the infrastructure depending on your internet network. Be patient !!!

Once the infrastructure is created, you will get the output below.

Copy the link in red and paste it into your browser.

You will get the output below.

You can go ahead and create an account, then customize the web pages.

Congratulations, you deployed a WordPress application with an RDS database using Terraform.



https://dataservicegroup.atlassian.net/wiki/x/FYBDhQ