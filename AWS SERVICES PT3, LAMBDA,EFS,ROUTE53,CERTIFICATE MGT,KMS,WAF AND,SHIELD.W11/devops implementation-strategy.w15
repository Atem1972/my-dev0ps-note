
DevOps Implementation Strategy
September 2, 2024
Lesson Progress
0% Complete
MARCH WE 2024 MARCH 2024 W15 : Intro to SDLC, Intro to DevOps, Jenkins intro and installation, Jenkins first job and java-path – git – maven configuration DevOps Implementation Strategy
In Progress

As a DevOps engineer for a consulting company (DSG), you worked on a project of implementing the DevOps strategy for a company. Right now these are some of the ways things are done:

1- Source code is scattered across Developer workstations with no version control.

2- Developers are compiling code and packaging build artifacts on their personal workstations. There is no consistent and repeatable method of building the application.

3- Any testing that is executed is strictly manual.

4- Developers and QA Engineers are manually copying build artifacts to test servers. They are also performing manual operations such as restarting services to propagate changes.

5- Configuration files are modified manually on individual workstations and copied to test and production servers. Alternatively, IT operations modify individual files directly on test and prod servers. The files are not stored in a repository nor are they under version control.

6- There are inconsistencies with the versions of the operating systems in the test and production environments. No standard OS has been established. Installations and patching are executed manually. As a result, there are a large number of security vulnerabilities. There is no threat detection or automated security scanning.

7- Creating new infrastructure is a predominantly manual task that is cumbersome and not easily reproducible. Environment drift is rampant across the entire stack. Operating and capital expenses are high to maintain the systems in the current data center.

8- System and application monitoring does not exist.

9-Database schema changes are executed manually with no version control.

10-The relationship between Dev and Ops is fractured. Communication is lacking or incomplete. Blame is often deflected. A common response to requests or problems is, “That’s not my job!”.

11-Production deployments are executed manually on a quarterly basis. The event may take 10-12 hours and requires 8 people to complete it. Your team is tasked to set up and adopt some of the DevOps culture and build some automated CI/CD pipeline for that company.
###################################################################

After a couple meetings with your team lead, these are some of the solutions to adopt immediately:

1- Bring a version control system for all codes, config files and any scripts subject to modification:

    Github
    Establish the branching strategy

2- Set up a Jenkins server that will help with automated code build, code analysis, docker image build, terraform command execution, maven execution, script execution and more.

3- Setup code analysis tool: Sonarcloud.

    Configure SonarCloud so that we can scan the code using Jenkins

4- Setup deployment and configuration tool: Ansible.

5- Setup a container orchestration tools: EKS ==> Kubernetes, Deployment using Helm

6- Configure various CI/CD pipelines.

7- Setup monitoring for apps: Prometheus and Grafana, Splunk

8- Security:

    Branching strategy
    Sonar – Sonarlint – Checkov for terraform scan
    Limited access to Jenkins
    Version artifact
    Rollback strategy

9- Approval process: CR

10- Deployment strategy: blue green

11- Rollback strategy: – Deploy the previous version of artifact

12- Observability for any improvement Implementation: After a couple meetings with the team lead on this project, a design was adopted and followed a long list of user stories/tasks to implement the solution.

1- Setup Github and branching strategy (Git flow). (No push direct to master only merge from pull request)

2- Jenkins Server : create a server and then set up a Jenkins server, for the CI/CD pipeline.

3- Integrate Docker in Jenkins: Integrate docker to Jenkins server for the creation and build of application’s docker images.

4- Integrate Maven in Jenkins: Integrate Maven to your Jenkins server, for the management of dependencies and the compilation and packaging of Java applications

5- Integrate Git in Jenkins: Integrate Git to your Jenkins server, to manage source code versioning and development workflow.

6- Run test: – Create a pipeline for the geolocation app ( this is a java app) – Verify that a jar file is created.

7- Setup an artifactory tool: Jfrog.

    Create repositories for Docker images, Zip file, Jar file, War file and Helm Chart
    Run Tests
    Use the geolocation repository to build a CI pipeline that will generate a Jar file and push it to Jfrog
    To deploy the Jar file on a test server, we need to run below commands: * wget url_of_jar * java -jar jar_file 
    Execute these commands on a virtual server and make sure you can access the app on port 8082 
    Create a CD Job in Jenkins that will be used to run the deployment on the test server
    Connect the CI Jar file build pipeline with the CD Jar file deploy. (CD job will be trigger after a successful build of the CI job)

8- There is a Python script for checking endpoints, and we need to set up a Jenkins pipeline to run it every 5 minutes. Please go ahead and work on the project. link to the script: Check-endpoint-script

9- Create a pipeline for bash scripts that will pull the script from Github and archive it into a zip file with the version.

    Use middleware script repository to build a CI pipeline test and push the zip file created by Jenkins to Jfrog

10- Integrate jenkins with slack for notification. Click here and follow the documentation.

https://github.com/utrains/check_endpoint.git