Docker Lab setup with Terraform

Owned by noel.tatah (Unlicensed)
Last updated: Aug 26, 2024 by Estephe Kana
5 min read

In this document, we will set up the lab we will use for the docker class.

The setup will have the following sections

    Clone code from GitHub

    Terraform Code explained

    Run the code to create a Lab

Prerequisites

    Terraform must be installed (installation steps here if you have not yet installed it)

    AWS CLI must be installed (installation steps Here) and configured (link here if you have not yet configured AWS-CLI in your terminal)

1- Clone Terraform code

Create a new directory, DevOpsLab. Our projects and labs will be created in this directory from here on.
mkdir DevOpsLab

Navigate to the directory
cd DevOpsLab

Now create a directory Docker which we will use to create all the Docker labs and projects.
mkdir Docker

Now move into the directory
cd Docker

clone the code from GitHub
git clone https://github.com/utrains/docker-Lab.git

Once the cloning is completed, move into the docker-Lab directory
cd docker-Lab

 at this level, we will explain  the code before creating our lab
2- Explain Terraform code

The code you clone above has two files. You can run ls to see the files
ls

The main.tf and the install.sh 

The main.tf file has the content below
# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
}

# create default vpc if one does not exit
resource "aws_default_vpc" "default_vpc" {
}

  # Create Web Security Group
resource "aws_security_group" "web-sg" {
  name        = "docker-Web-SG"
  description = "Allow ssh and http inbound traffic"
  vpc_id      = aws_default_vpc.default_vpc.id

  ingress {
      description = "ingress port "
      #from_port   = ingress.value
      from_port   = 8000
      to_port     = 8100
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    
  }
  ingress {
      description = "ingress port "
      #from_port   = ingress.value
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    
  }
  ingress {
      description = "ingress-port "
      #from_port   = ingress.value
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "docker-Web-SG"
  }
}

  
# Generates a secure private k ey and encodes it as PEM
resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}
# Create the Key Pair
resource "aws_key_pair" "ec2_key" {
  key_name   = "docker-keypair"  
  public_key = tls_private_key.ec2_key.public_key_openssh
}
# Save file
resource "local_file" "ssh_key" {
  filename = "${aws_key_pair.ec2_key.key_name}.pem"
  content  = tls_private_key.ec2_key.private_key_pem
  file_permission = "400"
}

#data for amazon linux

data "aws_ami" "amazon-2" {
    most_recent = true
  
    filter {
      name = "name"
      values = ["amzn2-ami-hvm-*-x86_64-ebs"]
    }
    owners = ["amazon"]
  }
 
#create ec2 instances 

resource "aws_instance" "DockerInstance" {
  ami                    = data.aws_ami.amazon-2.id
  instance_type          = "t2.medium"
  vpc_security_group_ids = [aws_security_group.web-sg.id]
  key_name               = aws_key_pair.ec2_key.key_name
  user_data              = file("install.sh")
  root_block_device {
    volume_size = 30  
    volume_type = "gp2"  
  }

  tags = {
    Name = "docker-instance"
  }
 
}


output "ssh-command" {
  value = "ssh -i ${aws_key_pair.ec2_key.key_name}.pem ec2-user@${aws_instance.DockerInstance.public_dns}"
}

output "public-ip" {
  value = aws_instance.DockerInstance.public_ip
}

This file contains the terraform code to create a security group and an ec2 instance with docker already installed. The code auto opens port 8000 to port 8100

Docker installation is done thanks to the bash script install.sh which is used as the userdata. Below is the content of install.sh 
#!/bin/bash
# docker install
sudo yum update -y
sudo yum install docker -y
sudo usermod -aG docker ec2-user
sudo service docker start
sudo systemctl enable docker 
# Change terminal color for user ec2-user
echo "PS1='\e[1;32m\u@\h \w$ \e[m'" >> /home/ec2-user/.bash_profile
#install git
sudo yum install git -y
# install wget
sudo yum install wget -y

#install docker compose
sudo curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

The above bash script installs docker, adds the ec2-user to the group docker and starts docker.

We are done with the code explanation, let's go ahead and launch our lab.
3- Launch Lab

To launch the lab, run the commands below on your terminal
terraform init
terraform plan
terraform apply --auto-approve

You will get the output below 

In the output, you have the public IP of the instance and the ssh-command of the instance, keep these two handy because you will need it as we go ahead.

Wait for 5â€“10 mins

Then copy the SSH command underlined above and paste it to access the server using an SSH connection.

Once in your server, run the command below to verify if your lab  is working 
docker ps 

You will get the output below
Possible errors:

Below are some of the errors you might encounter and how you can solve them.

Command not found error

If you have the error above, then you did not wait long before logging into your server. To solve it, exit and wait for a while, then login again with the ssh command.

Permission denied.

If you have this error,  just exit and login again.

