Docker is a containerization software used to create and manage containers. To use Docker containers, you must first of all install Docker on your system. 
Prerequisites

For this tutorial, you need to launch either a Redhat (Centos) or an Ubuntu instance in EC2. 
Docker installation on a Centos 7 or Centos 9 server (recommended method)

First, connect to your Centos server, then run the commands below
Step1: Clean up the system

Make sure the system is clean by removing any old version of docker that might be installed:

it’s ok if Yum reports that none of these packages are installed:
sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine

or run the following commands to clean an old version of docker:
sudo yum remove docker-ce docker-ce-cli containerd.io -y
Step 2: Setup the docker repository

To do that, run the following commands:
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
Step 3: Install the docker engine

Use the following command to install the latest version of Docker Engine on your system:
sudo yum install docker-ce docker-ce-cli containerd.io -y
Step 4: Check the status, start and enable docker daemon

Check the status of the docker daemon with the command
sudo systemctl status docker

If the daemon is not up and running, start and enable it with the commands

 
sudo systemctl start docker
sudo systemctl enable docker

Check the status of the daemon to make sure it is up and running with
sudo systemctl status docker

Note: To be able to run docker commands with the default user created in AWS EC2, you will need to add it to the docker group. After that, you will need to exit and log back into the server from your terminal
sudo usermod -aG docker ec2-user
exit
Docker installation on Ubuntu (From official repository)
Prerequisites

To install docker, you need the 64-bit version of the Ubuntu 18.04 OS or any recent Ubuntu version. You also need a user account with sudo privileges.
Step 1: Clean up the system

Make sure the system is clean by removing any old version of docker that might be installed:
sudo apt-get remove docker docker-engine docker.io containerd runc

it’s ok if apt-get reports that none of these packages are installed.
Step 2: Setup the docker repository

To do that, run the following commands:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg lsb-release

Now, add Docker’s official GPG key with the command
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

Then, use the following command to set the stable repository
 echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null 
Step 3: Install the Docker Engine

Update the apt package index and install the latest version of the Docker Engine
sudo apt-get update 

Receiving a GPG error when running apt-get update?

Your default umask may be incorrectly configured, preventing detection of the repository public key file. Try granting read permission for the Docker public key file before updating the package index:
sudo chmod a+r /etc/apt/keyrings/docker.gpg
sudo apt-get update

Now, you can install the docker engine and check the status of the daemon with:
sudo apt-get install docker-ce docker-ce-cli containerd.io -y
sudo systemctl status docker

If the daemon is not up and running, start and enable it with
sudo systemctl start docker
sudo systemctl enable docker

Verify that the version is installed correctly by running the Hello World image:
sudo docker run hello-world

Note: To be able to run docker commands with the default user created in AWS EC2, you will need to add it to the docker group. After that, you will need to exit and log back into the server from your terminal
sudo usermod -aG docker ubuntu
exit

 