LAMP Stack installation on EC2 using Terraform

Owned by Estephe Kana
Last updated: Aug 29, 2024
8 min read
Objective

After following this tutorial, you should be able to install a Lamp stack server automatically on an EC2 instance using Terraform.
Prerequisites

    Terraform must be installed (installation steps here if you have not yet installed it)

    aws cli must be installed (installation steps Here) and configured (link here if you have not yet configured AWS-CLI in your terminal)

Let’s follow the steps below to create an EC instance, then install the LAMP stacker server and WordPress on it.
Step 1: Creation of Terraform Configuration files

Here is the link to get all the following configuration files.
Creation of the project directory

Before creating the terraform files, let’s create a project directory that will store all those files by using the following steps:

    cd into the directory for all your terraform projects created in previous labs

cd ~
cd terraform-projects

If the terraform-projects have not yet been created, use this command: mkdir terraform-projects

    In this directory, create a folder called terraform-lamp-stack for this project and navigate to it:

mkdir terraform-lamp-stack
cd terraform-lamp-stack

Now, we can create terraform files for the project.
Creation of the Terraform main.tf file

The main.tf file will contain the configuration to create resources such as instances, VPC, subnets, …etc. Use the following command to create it:
code main.tf

    Copy the following code and paste it into the main.tf file, then save it with Ctrl + S

# configured aws provider with proper credentials
provider "aws" {
  region    = var.aws_region
  profile   = "default"
}
# Create a VPC
resource "aws_vpc" "lamp-vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "Lamp VPC"
  }
}

# Create Web Public Subnet
resource "aws_subnet" "lamp-subnet" {
  vpc_id                  = aws_vpc.lamp-vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "lamp-subnet"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.lamp-vpc.id

  tags = {
    Name = "Lamp IGW"
  }
}

# Create Web layer route table
resource "aws_route_table" "web-rt" {
  vpc_id = aws_vpc.lamp-vpc.id


  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "lamp WebRT"
  }
}

# Create Web Subnet association with Web route table
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.lamp-subnet.id
  route_table_id = aws_route_table.web-rt.id
 }

# Create Web Security Group
resource "aws_security_group" "lamp-sg" {
    name        = "Lamp security group"
    description = "Allow ssh inbound traffic"
    vpc_id      = aws_vpc.lamp-vpc.id
  
    ingress {
      description = "ssh from VPC"
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
    
    ingress {
    description = "http port"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    }
    
    egress {
      from_port   = 0
      to_port     = 0
      protocol    = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
  
    tags = {
      Name = "Lamp-SG"
    }
}

# use data source to get a registered amazon linux 2 ami
data "aws_ami" "amazon_linux_2" {
  most_recent = true
  owners      = ["amazon"]
  
  filter {
    name   = "owner-alias"
    values = ["amazon"]
  }

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}

#create ec2 instance for Lamp stack

resource "aws_instance" "lamp_server" {
  ami                    = data.aws_ami.amazon_linux_2.id
  instance_type          = var.aws_instance_type
  subnet_id              = aws_subnet.lamp-subnet.id
  vpc_security_group_ids = [aws_security_group.lamp-sg.id]
  key_name               = aws_key_pair.lamp_key.key_name
  user_data              = file("install_lamp.sh")
   
  tags = {
    Name = "Lamp stack"
    Environment = "dev"
  }
}
# an empty resource block
resource "null_resource" "name" {

  # ssh into the ec2 instance 
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file(local_file.ssh_key.filename)
    host        = aws_instance.lamp_server.public_ip
  }
  # wait for ec2 to be created
  depends_on = [aws_instance.lamp_server]
}
Creation of the Terraform generate_key.tf file

This file will contain the configuration to generate the ssh key that allows the connection to the EC2 instance. To create the generate_key.tf file, use the command below:
code generate_key.tf

    Copy the following code and paste it into the generate_key.tf file, then save it with Ctrl + S

# Generates a secure private key and encodes it as PEM
resource "tls_private_key" "lamp_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}
# Create the Key Pair
resource "aws_key_pair" "lamp_key" {
  key_name   = var.key_pair_name 
  public_key = tls_private_key.lamp_key.public_key_openssh
}
# Save file
resource "local_file" "ssh_key" {
  filename = "${var.key_pair_name}.pem"
  content  = tls_private_key.lamp_key.private_key_pem
  file_permission = "400"
}
Creation of the Terraform var.tf file

This file will contain the configuration variables used to create the infrastructure. To create the var.tf file, use the command below:
code var.tf

    Copy the following code and paste it into the var.tf file, then save it with Ctrl + S

variable aws_region {
  description = "This is aws region"
  default     = "us-east-1"
  type        = string
}
variable aws_instance_type {
  description = "This is aws ec2 type "
  default = "t2.micro"
  type        = string
}
variable key_pair_name {
  description = "This is name of the key pair"
  default     = "lamp_key_pair"
  type        = string
}
Creation of the Terraform output.tf file

This file is used to output the command to connect to the server via ssh and the public IP address of it. To create the output.tf file, use the command below:
code output.tf

    Copy the following code and paste it into the output.tf file, then save it with Ctrl + S

# print the ssh command to connect to the LAMP server
output "ssh_lamp_server_command" {
  value     = join ("", ["ssh -i ${local_file.ssh_key.filename} ec2-user@", aws_instance.lamp_server.public_dns])
}
# print the url of the LAMP server
output "lamp_server_url" {
  value     = join ("", ["http://", aws_instance.lamp_server.public_ip, ":", "80"])
}
Creation of the install_lamp.sh  file

This file is a bash shell script that will be used as user data for the installation of Apache, MySQL, Php and WordPress. To create the install_lamp.sh  file, use the command below:
code install_lamp.sh

    Copy the following code and paste it into the install_lamp.sh file, then save it with Ctrl + S

#!/bin/bash

# Set mysql config variables
db_username="oracle"
db_user_password="school1"
db_name="webserver"

# update the centos 7 server
sudo yum update -y
# install apache, mysql, php and its additionnal packages
sudo yum install httpd mariadb-server php php-mysql php-gd -y

# start the httpd daemon
sudo systemctl start httpd

# enable the httpd daemon
sudo systemctl enable httpd

# get the status of htpd daemon
sudo systemctl status httpd

# start mysql service 
sudo systemctl start mariadb

# enable mysql service
sudo systemctl enable mariadb

# Change OWNER and permission of directory /var/www
usermod -a -G apache ec2-user
sudo chown -R ec2-user:apache /var/www
find /var/www -type d -exec chmod 2775 {} \;
find /var/www -type f -exec chmod 0664 {} \;

# Download wordpress package and extract
sudo yum install wget -y
wget http://wordpress.org/wordpress-5.1.1.tar.gz
tar -xzvf wordpress-5.1.1.tar.gz
rm -f wordpress-5.1.1.tar.gz
cp -r wordpress/* /var/www/html/

# AUTOMATIC mysql_secure_installation

# Create database, database user and grant privileges
mysql -u root -e "CREATE DATABASE $db_name;"
mysql -u root -e "CREATE USER '$db_username'@'localhost' IDENTIFIED BY '$db_user_password';"
mysql -u root -e "GRANT ALL PRIVILEGES ON $db_name.* TO '$db_username'@'localhost';"
mysql -u root -e "FLUSH PRIVILEGES;"

# Create wordpress configuration file and update database value
cd /var/www/html
cp wp-config-sample.php wp-config.php

sed -i "s/database_name_here/$db_name/g" wp-config.php
sed -i "s/username_here/$db_username/g" wp-config.php
sed -i "s/password_here/$db_user_password/g" wp-config.php
cat <<EOF >>/var/www/html/wp-config.php

define( 'FS_METHOD', 'direct' );
define('WP_MEMORY_LIMIT', '256M');
EOF

# Enable apache and mysql and restart apache
sudo systemctl enable  httpd
sudo systemctl enable mariadb
sudo systemctl restart httpd

Once all the files are created and saved, let’s go ahead and create the EC2 instance.
Step 2: Launch the EC2 instance

    Let’s initialize our infrastructure using the following command in the terminal:

terraform init

    Now, let's run the following command to get a plan of resources that will be created for our infrastructure:

terraform plan

    Run this command to launch an EC2 instance and all resources needed:

terraform apply --auto-approve

Once completed, you will get the output below:
Step 3: WordPress Configuration

Copy the URL of the lamp stack server and paste it into the browser, you will get the result as in the following image:

    For the WordPress installation, choose the language English and continue:

    Now, fill out the form as in the following image and click on Install WordPress

        Username: student

        Password: school1

    You can now log in with the user student and its password school1.

    The dashboard will open: this is the backend of the website. If you click on the name of the site, you will have a default preview

    We can change the theme of the site by going back to the dashboard

image-20240615-143214.png

    Click on Appearance then Themes, and Click on Activate for Twenty seventeen

    To Choose another theme, click on Activate to enable it.

    Preview the site once more

This is how some websites are easily set up with WordPress!

You will get the final result:

You successfully installed LAMP stack and WordPress on an EC2 instance grinning face 
Step 4: Destroy the infrastructure

Once you have done so, you can use the following command to destroy all resources created in AWS:
terraform destroy --auto-approv